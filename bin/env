#!/bin/bash

## This Environment variables can be set from outside when calling the cli
export APP_NAME=${APP_NAME:-"Hello Skeleton"}
export NODE_ENV=${NODE_ENV:-"development"}
export APP_LOCAL_NODE=${APP_LOCAL_NODE:-"true"}
export APP_NODE_VERSION=${APP_NODE_VERSION:-"unstable"} # stable, unstable, default or X.Y.Z
export APP_DEFAULT_NODE_VERSION="stable"

## Get the absolute canonical directory regardless from where you are calling the script.
## Make sure to prepend $APP_ROOTPATH whenever you can so you are absolutly sure
## that always the absolute and correct path gets used.
export APP_ROOTPATH="$(cd $(dirname $(cd $(dirname $0);pwd -P));pwd -P)"
export APP_CONFPATH="$APP_ROOTPATH/config"
export APP_CONFFILE="$APP_CONFPATH/app.json"
export APP_VARPATH="$APP_ROOTPATH/var"
export APP_BINPATH="$APP_ROOTPATH/bin"
export APP_HOMEPATH="$APP_ROOTPATH/app"
export APP_RUNPATH="$APP_VARPATH/run"
export APP_OPTPATH="$APP_VARPATH/opt"
export APP_TMPPATH="$APP_VARPATH/tmp"
export APP_LOGPATH="$APP_VARPATH/log"
export APP_DATAPATH="$APP_VARPATH/data"
export APP_LIBPATH="$APP_VARPATH/lib"

################################################################################

## This is needed to restore the original - the users Current working dir
## Because we are changing directories.
ORIG_CWD="$(pwd)"
APP_DOWNLOAD_HOST="http://nodejs.org/dist"

# lowercase the system name 'linux' 'darwin' 'sunos'
APP_HOST_SYSTEM="$(uname -s | tr ['A-Z'] ['a-z'])"
if [[ "$APP_HOST_SYSTEM" == "sunos" ]]; then
  if [[ "$(isainfo -b)" == '64' ]]; then
    APP_HOST_BITNESS="x64"
  else
    APP_HOST_BITNESS="x86"
  fi
else
  if [[ "$(uname -m)" == 'x86_64' ]]; then
    APP_HOST_BITNESS="x64"
  else
    APP_HOST_BITNESS="x86"
  fi
fi


## Thanks to https://github.com/visionmedia/n/blob/master/bin/n#L35-45
# wget support (Added --no-check-certificate for Github downloads)
type -p wget > /dev/null && GET="wget --no-check-certificate -q -O-"
# curl support (Added --insecure for Github downloads)
type -p curl > /dev/null && GET="curl --insecure -# -sSL"

if [[ -z $GET ]]; then
  echo "Need 'curl' or 'wget'. Install one of these and try again. Sorry."
  exit 1;
fi

################################################################################

app_get_latest_stable_node_version() {
  $GET http://nodejs.org/dist/ \
  | sed -n -E "s/.*([0-9]+\.[0-9]*[02468]\.[0-9]+).*/\1/gp" \
  | sort -u -k 1,1n -k 2,2n -k 3,3n -t . \
  | tail -n1
}

app_get_latest_unstable_node_version() {
 $GET http://nodejs.org/dist/ \
 | sed -n -E "s/.*([0-9]+\.[0-9]+\.[0-9]+).*/\1/gp" \
 | sort -u -k 1,1n -k 2,2n -k 3,3n -t . \
 | tail -n1
}

## NPM related stuff
app_init_node() {
  export APP_NPM_ROOTPATH="$APP_OPTPATH/node"
  export APP_NPM_BINPATH="$APP_NPM_ROOTPATH/bin"

  export NODE_PATH="$APP_NPM_ROOTPATH/lib/node_modules"
  export PATH="${PATH//:${APP_NPM_BINPATH}:/:}"
  export PATH="$APP_NPM_BINPATH:$PATH"

  export npm_config_prefix="$APP_NPM_ROOTPATH"
  export npm_config_globalconfig="$APP_CONFPATH/npmrc"
  export npm_config_globalignorefile="$APP_CONFPATH/npmignore"
  export npm_config_userignorefile="$APP_HOMEPATH/.npmignore"
  export npm_config_userconfig="$APP_HOMEPATH/npmrc"
  export npm_config_init_module="$APP_HOMEPATH/npm-init.js"
  export npm_config_cache="$APP_NPM_ROOTPATH/cache"
  export npm_config_tmp="$APP_TMPPATH"

  local identifier="$(app_get_node_identifier $APP_NODE_VERSION)"
  if [[ -h "${APP_OPTPATH}/node" ]]; then
    rm "${APP_OPTPATH}/node"
  fi
  if [[ ! -e "${APP_OPTPATH}/node" ]]; then
    cd "${APP_OPTPATH}" \
    && ln -s "${identifier}" "node" >/dev/null 2>&1
  fi

  if [[ ! -e "${APP_BINPATH}/node" ]]; then
    cd "${APP_BINPATH}" \
    && ln -s "app" "node" >/dev/null 2>&1
  fi
  if [[ ! -e "${APP_BINPATH}/npm" ]]; then
    cd "${APP_BINPATH}" \
    && ln -s "app" "npm" >/dev/null 2>&1
  fi
  cd "$ORIG_CWD"
}

app_get_installed_node_version() {
  if [[ -f "$APP_OPTPATH/.node_version" && -r "$APP_OPTPATH/.node_version" ]]; then
    echo "$(cat $APP_OPTPATH/.node_version)"
  else
    echo ""
  fi
}

app_get_node_version() {
  local version="${1:-$APP_DEFAULT_NODE_VERSION}"
  if [[ "$version" == "stable" ]]; then
    version="$(app_get_latest_stable_node_version)";
  elif [[ "$version" == "unstable" ]]; then
    version="$(app_get_latest_unstable_node_version)";
  elif [[ "$version" == "default" ]]; then
    version="$(app_get_node_version $APP_DEFAULT_NODE_VERSION)";
  else
    version="$version"
  fi
  ## Check if version is semantically correct
  version="$(echo $version | sed -n -E 's/^([0-9]+\.[0-9]+\.[0-9]+)$/\1/gp')"
  ## if it does not match we try to get the 'default' version
  if [[ -z "$version" ]]; then
    version="$(app_get_node_version $APP_DEFAULT_NODE_VERSION)"
  fi
  echo "$version"
}

app_get_node_identifier() {
  local version="v$1"
  local system="$APP_HOST_SYSTEM"
  local bitness="$APP_HOST_BITNESS"
  local identifier="node-${version}-${system}-${bitness}"
  echo $identifier
}

app_install_node() {
  local version="$1"
  local identifier="$(app_get_node_identifier $version)"
  local packagename="${identifier}.tar.gz"
  local downloadUrl="${APP_DOWNLOAD_HOST}/v${version}/${packagename}"
  $GET "${downloadUrl}" > $APP_TMPPATH/$packagename \
  && cd $APP_OPTPATH \
  && tar xzf $APP_TMPPATH/$packagename &> /dev/null
  echo "$version" > $APP_OPTPATH/.node_version
  return 0;
}

app_local_node_installed() {
  local localInstalled="$(app_get_installed_node_version)"
  local identifier="$(app_get_node_identifier $localInstalled)"
  if [[ -r "$APP_OPTPATH/$identifier" && -d "$APP_OPTPATH/$identifier" ]]; then
    echo "true";
  else
    echo "false";
  fi
}

app_init() {
  mkdir -p \
  $APP_TMPPATH \
  $APP_RUNPATH \
  $APP_LOGPATH \
  $APP_DATAPATH \
  $APP_OPTPATH &> /dev/null
  if [[ "x$APP_LOCAL_NODE" == "xtrue" ]]; then
    if [[ "x$(app_local_node_installed)" == "xfalse" ]]; then
      export APP_NODE_VERSION="$(app_get_node_version $APP_NODE_VERSION)"
      echo "Installing node v$APP_NODE_VERSION."
      app_install_node $APP_NODE_VERSION;
      if [[ $? -gt 0 ]]; then
        echo "[ERROR] Error installing node v$APP_NODE_VERSION.";
        exit 1;
      fi
    fi
    export APP_NODE_VERSION="$(app_get_installed_node_version)"
    app_init_node
  else
    if [[ ! $(type -P node) ]]; then
      echo "[ERROR] node was not found on PATH. Please install it and try again.";
      exit 1;
    fi
  fi
  cd "$ORIG_CWD"
  return 0;
}
